/*  OLED Screen pins on Uno: 
 *  SCL --> A5
 *  SDA --> A4
 */

#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);


#define HALL_PIN 2
bool hallState = false;

unsigned long brightness = 0x33;


// data from: Graphics/Hack The Planet/HTP Logo - reversed - 128x64
const PROGMEM unsigned char HTP_image_data[] = {
0x00, 0x00, 0x3F, 0xC0, 0x7F, 0x81, 0xFE, 0x00, 0x03, 0xF8, 0x0F, 0xF0, 0x1F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xC0, 0x7F, 0x81, 0xFF, 0x00, 0x1F, 0xFF, 0x1F, 0xF0, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xC0, 0x7F, 0x83, 0xFF, 0x00, 0x7F, 0xFF, 0x9F, 0xF0, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x83, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0xF0, 0x3F, 0x80, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x83, 0xFF, 0x81, 0xFE, 0x3F, 0xDF, 0xF0, 0x3F, 0x80, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x87, 0xFF, 0x83, 0xF8, 0x0E, 0x1F, 0xF0, 0x7F, 0x80, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x87, 0xEF, 0xC7, 0xF0, 0x00, 0x1F, 0xF0, 0x7F, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x87, 0x83, 0xC7, 0xE0, 0x00, 0x1F, 0xF0, 0x7F, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x87, 0x01, 0xCF, 0xE0, 0x00, 0x1F, 0xF0, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE0, 0xFF, 0x8F, 0x01, 0xCF, 0xE0, 0x00, 0x1F, 0xF0, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xE1, 0xFF, 0x8F, 0x01, 0xFF, 0xE0, 0x00, 0x1F, 0xF8, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xF1, 0xFF, 0x8F, 0x01, 0xFF, 0xE0, 0x00, 0x1F, 0xF9, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x9F, 0x83, 0xFF, 0xF0, 0x00, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x9F, 0xEF, 0xFF, 0xF0, 0x04, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xF8, 0x0E, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE0, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE0, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE0, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE1, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE1, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE1, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xE1, 0xFF, 0xFF, 0x87, 0xFF, 0x3F, 0xFF, 0xBF, 0xF8, 0x7F, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x7F, 0xF1, 0xFF, 0xFF, 0x87, 0xFF, 0x1F, 0xFE, 0x3F, 0xF8, 0x7F, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x1F, 0xFC, 0x0F, 0xF0, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x3F, 0xFF, 0xCF, 0xF8, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x3F, 0xC3, 0xFF, 0xF8, 0x00, 0x1F, 0xFF, 0xC3, 0xC0, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x00,
0x00, 0x3F, 0x81, 0xFF, 0xF8, 0x00, 0x1F, 0xFF, 0xEF, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0x01, 0xFF, 0xF8, 0x00, 0x0F, 0x3F, 0xFE, 0x70, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0x01, 0xFF, 0xF8, 0x00, 0x0F, 0x7D, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0x01, 0xFF, 0xF8, 0x00, 0x0F, 0x7D, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0x83, 0xFF, 0xF8, 0x00, 0x0F, 0x7D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xC7, 0xFF, 0xF8, 0x00, 0x0F, 0x7D, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0x3D, 0xF3, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xE0, 0x7F, 0x00, 0x1F, 0x83, 0xF0, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xE0, 0x7F, 0x80, 0x3F, 0x8F, 0xFE, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x1F, 0xF0, 0x7F, 0xC0, 0x3F, 0xBF, 0xFF, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x1F, 0xF0, 0x7F, 0xC0, 0x3F, 0xFF, 0x1F, 0xFF, 0x80, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x1F, 0xF0, 0x7F, 0xE0, 0x3F, 0xFC, 0x0F, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x3C, 0xF0, 0x7F, 0xF0, 0x3F, 0xFC, 0x07, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xFF, 0x9F, 0xF8, 0x00, 0x38, 0x38, 0x7F, 0xF8, 0x3F, 0xF8, 0x07, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0x38, 0x38, 0x7F, 0xFC, 0x3F, 0xF8, 0x07, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0x78, 0x38, 0x7F, 0xFE, 0x3F, 0xFC, 0x07, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0x78, 0x3C, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xFF, 0x80, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0x7E, 0xFC, 0x7F, 0xFF, 0x3F, 0xFE, 0x1F, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0xFF, 0xFC, 0x7F, 0x7F, 0xBF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0xFF, 0xFE, 0x7F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x00, 0xFF, 0xFE, 0x7F, 0x1F, 0xFF, 0xFF, 0x01, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xF8, 0x01, 0xFF, 0xFE, 0xFF, 0x1F, 0xFF, 0xFF, 0x00, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFC, 0x7D, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x80, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFD, 0xFE, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0x81, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xE1, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFD, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0x80, 0xFF, 0xCF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00
};

void setup() {
    Serial.begin(112500);
    Serial.println("Started OLED_computer");

    if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c)) { // Address 0x3D for 128x64
        Serial.println(F("SSD1306 allocation failed"));
        for(;;);
    }

    pinMode(HALL_PIN, INPUT);

    delay(1000);
    display.ssd1306_command(SSD1306_SETCONTRAST);
    display.ssd1306_command(brightness);
    display.clearDisplay();
    display.display();

}

void loop() {
    hallState = digitalRead(HALL_PIN);

    if (hallState == false){
        display.drawBitmap(0, 0, HTP_image_data, 128, 64, WHITE);
        display.display();
        delay(2000);
  
        display.clearDisplay();
        display.display();
    }
}